* Simple Geometry Generation for Rendering

Simple Geometry [SG] is an ansi-c99 single-header framework for generating simple geometry.
SG is able to generate vertices, indices, normals & texture coordinates for various rendering primitives.

** Why c99

The chosen way of implementating the library allows for maximum portability, and thereby usability of differernt platforms, rendering api's etc.
SG has no external dependencies, and allows disabling dependencies on posix headers as'well, with minimal changes.

** Overall Goal
   
SG's overall goal and purpose is to provide simple rendering primitives, ready to use for rendering api's.
Ideally, just as with stb_image.h being the centerpiese for image importing in rendering API's tutorials, new programmers should be able to just drop in simple_geometry.h and get started with rendering, with minimal friction.

** Maximum Portability Through Design
 
SG does not make any assumptions.
This philosophy shines through the API's design.
The API is designed in the rather classical vector returning style, often found in other c API's. where in places such as when retrieving the generated geometry, it is up to the caller, to provide a memory area large enough to facilitate the returned data.
In the case of the returned data size being unknown. one simply calls the same method, but with the output buffer as a nullptr.

SG provides maximum transparency in what is happening.
All SG functions that has some kind of state associated with its usage, returns a status, except in the case where failing is simply not possible.
This gives the user maximum insight in the result of an operation, both upon success and failure states.

* Example: Generate the Floor for your Render

SG is a c api, but works well in C++ too when using an container such as a std::vector.
Please note that error checking has been omited for clarity.

#+begin_src c++
// Get the size of the vertices that will be returned
// note the output data pointer is 'nullptr' to specify we want the length
unsigned int length;
sg_cube_positions(5, 5, 1, nullptr, &length);

// scale the buffer to the size of the return
std::vector<sg_position> vertices(length);

// Get the vertices for the geometry
sg_cube_positions(5, 5, 1, vertices.data(), &length);
#+end_src
   
* Feature List

- [ ] Fully-Featured Tests:
  + [ ] Minimal Opengl Example

- [X] Utilities:
  + [X] Strided Block Copying for SOA Vertices Generation
  + [X] Flat Normal Calculation from Non-Indexed Vertices

- [ ] Geometry:
  + [X] Indexed Plane
  + [ ] Subdivided Plane (For Height Mapping)
  + [X] Indexed Cube
  + [X] Non-Indexed Cube
  + [ ] UV Sphere
  + [ ] UV Sphere
  + [ ] ICO Sphere
  + [ ] Cylinder
  + [ ] Cone
  + [ ] Capsule

- [ ] math.h Library Replacement:
  + [X] Allows Disabling
  + [ ] Contains alternative math operations such as square-root
