* Simple Geometry Generation for Rendering

An ansi-c99 single-header library for generating simple geometry.
#+begin_src c++
sg_cube_info info{};
info.width = 0.5f;
info.height = 0.5f;
info.depth = 0.5f;
	
unsigned int length;
sg_cube_vertices(&info, &length, nullptr, nullptr, nullptr);
sg_position* positions = (sg_position*)malloc(length * sizeof(sg_position));
sg_cube_vertices(&cube_info, &length, positions, nullptr, nullptr);

//Alternatively, in C++ the std::vector<> can be used for buffers
std::vector<sg_normal> normals(length);
sg_cube_vertices(&cube_info, &length, nullptr, normals.data(), nullptr);
#+end_src
Note that error detection and management is omitted in the above example.

** The Goal
   
SG's provides generation and modification algorithms for rendering simple primitives.
Integrate SG into rendering engines without any friction, simply include "simple_geometry.h" and generate platform & rendering-APU agnoristic primitives.

** Why c99

This library allows for maximum portability, and usability of differernt platforms, rendering-API's etc.
There are no external dependencies, but posix dependencies can be optionally included for ease-of-use.

* Use SimpleGeometry to Generate an Indexed Unit Sphere 

Start off by specifying the inclusion of the implementation.
#+begin_src c++
#define SIMPLE_GEOMETRY_IMPLEMENTATION
#include <simple_geometry.h>
#+end_src

Then, in your code:
#+begin_src c++
// Define the status for storing potential errors
SG_status status;

// Provide an information structure, and a length destination.
// @note because the output vertex pointers are all 'nullptr', we 
//       explicitly ask to retrieve the length of the needed buffer.
//       Remember to provide a valid geometry info struct, as this
//       *can* have an influence in the returned length.
sg_indexed_sphere_info sphere{};
sphere.radius = 0.5f;
sphere.slices = 8f;
sphere.stacks = 8f;

// Provide a destination length variable, it will be overridden with
// the minimum required count of vertices that will be returned.
// @note the returned length signifies the count of vertices,
//       not the required memory size.
unsigned int indices_length;
status = sg_indexed_sphere_indices(&sphere, &indices_length, nullptr);

// Check that the length is correctly returned.
// @note that alternatively, the function sg_success() can be used to
//       convert any status into a success/failure signifying boolean.
if (status != SG_OK_RETURNED_LEN)
    exit(1);

// Prepare a index buffer for the data that will be generated.
// Allocate it using malloc, an custom allocator or your choice, or even just
// provide c++ vectors.
// @note the provided buffer MUST be atleast the minimum length specified
std::vector<SG_indice> indices(indices_length);


status = sg_indexed_sphere_indices(&sphere, &indices_length, indices.data());
if (status != SG_OK_RETURNED_BUFFER)
    exit(1);

// Provide a destination length variable, it will be overridden with
// the minimum required count of vertices that will be returned.
// @note the returned length signifies the count of vertices,
//       not the required memory size.
unsigned int vertices_length;

// Generate the geometry indices.
// @note because the output data pointer points to valid memory,
//       the actual vertex data is generated and outputted to
//       the provided buffers.
status = sg_indexed_sphere_vertices(&sphere, &vertices_length, nullptr, nullptr, nullptr);
if (status != SG_OK_RETURNED_LEN)
    exit(1);

// Prepare vertex buffers for the optional data that will be generated.
// This can optionally be done for each of the possible outputs specified in the 
// function declaration, such as vertex- positions, normals & UV-coordinates.
// only non-nullptr pointers provided will be written to.
// @note each provided buffer MUST be atleast the minimum length specified
std::vector<sg_position> positions(length);
std::vector<sg_texcoord> uvs(length);

// Generate the geometry vertices.
// @note In this case we explicitly only generate the positions of the vertices,
//       if Normals / UV-coordinates are needed, seperate buffers should be prepared
//       and provided for those.
status = sg_cube_vertices(&sphere, &vertices_length, positions.data(), nullptr, uvs.data());
if (status != SG_OK_RETURNED_BUFFER)
    exit(1);
#+end_src

Now the indices and vertices are safe to work with!

** Additional Information on the Returned Vertices

The returned vertex data from this library is returned as individual buffers, reffered to as an Structure-Of-Arrays (SOA).
This layout is identified by the individual vertex elements being located in their own array structures, meaning that individual vertex sub-type is contained in its own buffer.
This layout form is chosen as the output as it allows for easier re-formatting should the user require another form of vertex layout.

Even though the generated geometry can be used in its SOA layout, it would commonly be required to re-structure the data into other vertex structures fitting the user's needs.
Consider the definition of a vertex, used for a custom renderer:
#+begin_src c++
struct vertex {
   struct {
      float x;
      float y;
      float z;
   } pos;
   struct {
      float u;
      float v;
   } tex;
};
#+end_src

This structure exibits a layout called Array-Of-Structures (AOS), and is identified by the individual vertex elements being located alongside each-other in an single array structure.

*** Converting from SOA to AOS

The returned vertex data is returned as SOA his is done with the intent that the user should stitch together the data in any fitting ordering required, such as the vertex structure defined above.
To fit the data to the example vertex structure, one can use the strided blockcopy utility:
#+begin_src c++
// Given the generated buffers from earlier, modeling the SOA pattern:
std::vector<sg_position> positions(length);
std::vector<sg_texcoord> uvs(length);

// Create a buffer for the vertices modeling a AOS pattern.
// @note the same length as each of the individual buffers is required.
std::vector<vertex> vertices(length);

// Create a blockcopy source information structure for the position buffer:
struct sg_strided_blockcopy_source_info positions_copy;
positions_copyptr = positions.data();
positions_copyblock_size = sizeof(positions[0]);
positions_copystride = sizeof(positions[0]);
positions_copyblock_count = positions.size();

// Do the strided blockcopy for the positions.
// The destination pointer and stride is provided seperately,
// to encourage re-use of the source_info structure
// for multiple copying operations.
// @note that in this case, the stride of the destination buffer is the
//       size of the entire vertex structure.
status = sg_strided_blockcopy(&positions_copy,
                              sizeof(vertex),
                              vertices.data());

// Create a blockcopy source information structure for the uv buffer:
struct sg_strided_blockcopy_source_info uvs_copy;
uvs_copyptr = uvs.data();
uvs_copyblock_size = sizeof(uvs[0]);
uvs_copystride = sizeof(uvs[0]);
uvs_copyblock_count = uvs.size();

// Do the strided blockcopy for the uv's.
// @note that the stride of the destination buffer is the
//       same as the copy operation earlier, but this time
//       the destination pointer is slided forward to correctly
//       point to the beginning of the first uv-element in the vertex 
//       structure. In this case we increment by the size of the 
//       position, as we want to copy to the tex structure.
status = sg_strided_blockcopy(&uvs_copy,
                              sizeof(vertex),
                              vertices.data() + sizeof(vertex.pos));
#+end_src
